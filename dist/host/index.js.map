{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/@mantou/gem/lib/utils.js","webpack:///./node_modules/@mantou/gem/lib/store.js","webpack:///./node_modules/@mantou/gem/lib/history.js","webpack:///./node_modules/lit-html/lib/directive.js","webpack:///./node_modules/lit-html/lib/dom.js","webpack:///./node_modules/lit-html/lib/part.js","webpack:///./node_modules/lit-html/lib/template.js","webpack:///./node_modules/lit-html/lib/template-instance.js","webpack:///./node_modules/lit-html/lib/template-result.js","webpack:///./node_modules/lit-html/lib/parts.js","webpack:///./node_modules/lit-html/lib/default-template-processor.js","webpack:///./node_modules/lit-html/lib/template-factory.js","webpack:///./node_modules/lit-html/lib/render.js","webpack:///./node_modules/lit-html/lit-html.js","webpack:///./node_modules/lit-html/directives/repeat.js","webpack:///./node_modules/lit-html/directives/if-defined.js","webpack:///./node_modules/@mantou/gem/lib/element.js","webpack:///./node_modules/@mantou/gem/index.js","webpack:///./node_modules/@mantou/gem/elements/route.js","webpack:///./host/app-header.ts","webpack:///./node_modules/@mantou/gem/elements/title.js","webpack:///./host/routes.ts","webpack:///./node_modules/@mantou/gem/elements/link.js","webpack:///./host/app-sidebar.ts","webpack:///./host/index.ts"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;AClFA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,kCAAkC;AAC5B;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,4BAA4B,OAAO;AACnC;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE,IAAI,GAAG,eAAe;AACxF;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,YAAY;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,EAAE,8BAA8B,KAAK;AACvD;AACA;AACA,KAAK,GAAG;AACR;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACG;AACP;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA,iC;;AC9LuC;AACvC;AACO;AACA;AACP;AACA;AACA,+CAA+C,sDAAsD;AACrG;AACA;AACO;AACP;AACA;AACA;AACA,KAAK;AACL;AACA;AACO;AACP;AACA;AACA;AACA,QAAQ,YAAY;AACpB,KAAK;AACL;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACA,iC;;AC/BmD;AACJ;AAC/C,qBAAqB,WAAW;AAChC,aAAa;AACb;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,SAAS,oGAAoG;AAC/I;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,eAAO;AACX;AACA;AACA;AACA,KAAK;AACL;AACA,eAAe,qBAAqB;AACpC;AACA;AACA,wEAAwE,EAAE;AAC1E,QAAQ,WAAW,iBAAiB;AACpC;AACA,KAAK;AACL;AACA,eAAe,qBAAqB;AACpC;AACA;AACA;AACA,2BAA2B,WAAW;AACtC,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA,eAAe,iCAAiC;AAChD;AACA;AACA;AACA;AACA;AACA,+CAA+C,eAAO,uBAAuB,WAAW;AACxF,eAAe,qBAAqB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,QAAQ,WAAW;AACnB;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,eAAe,qBAAqB;AACpC,eAAe,QAAQ;AACvB;AACA;AACA;AACA,YAAY,eAAO;AACnB;AACA;AACA,YAAY,eAAO;AACnB;AACA,KAAK;AACL;AACA;AACA,eAAe,qBAAqB;AACpC,eAAe,oBAAoB;AACnC,QAAQ,eAAO,qBAAqB;AACpC;AACA,kBAAkB;AAClB,KAAK;AACL;AACA,eAAe,iCAAiC;AAChD;AACA;AACA;AACA;AACA;AACA,kDAAkD,eAAO,uBAAuB,WAAW;AAC3F,eAAe,qBAAqB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,QAAQ,WAAW;AACnB;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA,eAAe,qBAAqB;AACpC,eAAe,oBAAoB;AACnC,QAAQ,eAAO,wBAAwB;AACvC;AACA,kBAAkB;AAClB,KAAK;AACL;AACA;AACA;AACA,IAAI,eAAO;AACX,qBAAqB,eAAO;AAC5B,0BAA0B,eAAO;AACjC;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA,0BAA0B,eAAO;AACjC;AACA;AACA,eAAe,yBAAyB;AACxC,QAAQ,eAAO,UAAU,sCAAsC;AAC/D;AACA;AACA;AACA,QAAQ,eAAO;AACf;AACA,wBAAwB,OAAO;AAC/B;AACA,IAAI,WAAW;AACf;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,qBAAqB;AACpC,eAAe,mBAAmB;AAClC,+CAA+C,QAAQ;AACvD;AACA;AACA;AACA,eAAe,kBAAkB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,eAAO,WAAW;AAClC,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,eAAO;AAC3B;AACA;AACA;AACA,QAAQ,WAAW;AACnB;AACA,SAAS;AACT,KAAK;AACL;AACmB;AACnB,mC;;ACjOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,mCAAmC,KAAK,QAAQ;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,gBAAgB;AAC3B;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACO,MAAM,mBAAS;AACtB;AACA;AACA;AACA,CAAC;AACM;AACP;AACA;AACA,qC;;AC9DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,+B;;AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP,gC;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,kBAAkB,MAAM,iCAAiC;AAChE;AACA;AACA;AACA;AACO,0BAA0B,OAAO;AACjC,kCAAkC,OAAO,GAAG,WAAW;AAC9D;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C,0FAA0F,qBAAqB;AAC/G;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,mBAAmB,SAAS,EAAE;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,SAAS;AACpC;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,YAAY;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,mDAAmD;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,eAAe;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,+BAA+B;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,sBAAsB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,0BAA0B;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,oC;;ACpNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACwC;AACa;AACrD;AACA;AACA;AACA;AACO,MAAM,kCAAgB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,YAAY;AACrC;AACA;AACA;AACA;AACA,+CAA+C;AAC/C,mFAAmF,qBAAqB;AACxG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,oBAAoB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,YAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,6C;;ACxIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACyC;AACwD;AACjG,0BAA0B,MAAM,CAAC;AACjC;AACA;AACA;AACA;AACO,MAAM,8BAAc;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,UAAU;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,sBAAsB;AACzD;AACA;AACA;AACA,yDAAyD,MAAM;AAC/D,8BAA8B,MAAM;AACpC;AACA,gEAAgE,UAAU;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,oBAAoB;AAC5D,oBAAoB,MAAM;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAM,iCAAiB,SAAS,8BAAc;AACrD;AACA,uBAAuB,gBAAgB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,aAAa;AACrB;AACA;AACA;AACA,2C;;AChHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC6C;AACN;AACO;AACY;AACJ;AACT;AACtC;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,wBAAwB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,mBAAa;AAChC;AACA;AACA;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAM,mBAAa;AAC1B;AACA;AACA;AACA;AACA;AACA,sBAAsB,QAAQ;AAC9B;AACA;AACA;AACA;AACA,iBAAiB,WAAW;AAC5B;AACA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B;AACA,yBAAyB,QAAQ;AACjC;AACA;AACA,2BAA2B,QAAQ;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAM,cAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,YAAY;AAC3D,6CAA6C,YAAY;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,YAAY;AACnD,qCAAqC,YAAY;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,YAAY;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B;AACA,kCAAkC,QAAQ;AAC1C;AACA;AACA;AACA,sBAAsB,QAAQ;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,8BAAc;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,OAAO;AAClC,yBAAyB,OAAO;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,kCAAgB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,kCAAgB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,EAAE;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,cAAQ;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,WAAW;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAM,0BAAoB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B;AACA,kCAAkC,QAAQ;AAC1C;AACA;AACA,oCAAoC,QAAQ;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,QAAQ;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,2BAA2B,mBAAa;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAM,eAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B;AACA,kCAAkC,QAAQ;AAC1C;AACA;AACA,oCAAoC,QAAQ;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,QAAQ;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,uDAAuD;AAChE;AACA,iC;;AC/bA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC8G;AAC9G;AACA;AACA;AACO,MAAM,mDAAwB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,iBAAiB;AACnD;AACA;AACA;AACA,wBAAwB,eAAS;AACjC;AACA;AACA,wBAAwB,0BAAoB;AAC5C;AACA,8BAA8B,kBAAkB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,cAAQ;AAC3B;AACA;AACO,qCAAqC,mDAAwB;AACpE,sD;;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACiD;AACjD;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,MAAM;AAC1C;AACA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,4C;;AC/CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACuC;AACD;AACkB;AACjD,MAAM,YAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,eAAe,YAAK;AACpB;AACA,QAAQ,WAAW;AACnB,QAAQ,YAAK,2BAA2B,cAAQ,gBAAgB,CAAC,gCAAe,EAAE;AAClF;AACA;AACA;AACA;AACA;AACA,kC;;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AAC+E;AACF;AAC4B;AAC7C;AAC5D;AAC0D;AACR;AACsH;AACxH;AAC4B;AACd;AACe;AACI;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAM,aAAI,+BAA+B,8BAAc,0BAA0B,wBAAwB;AAChH;AACA;AACA;AACA;AACO,wCAAwC,iCAAiB,yBAAyB,wBAAwB;AACjH,oC;;ACzDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC+F;AAC/F;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,YAAY;AACzD,2BAA2B,YAAY;AACvC,wBAAwB,cAAQ;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,aAAa;AACrB;AACA;AACA;AACA,IAAI,WAAW;AACf;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,UAAU;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,eAAe,mBAAS;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,cAAQ;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvyBAAyB;AACzB;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD;AACzD;AACA;AACA;AACA;AACA,yDAAyD;AACzD;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,sDAAsD;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,kC;;AC9ZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC0D;AAC1D;AACA;AACA;AACA;AACA;AACA;AACO,kBAAkB,mBAAS;AAClC,+CAA+C,mBAAa;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,sC;;AC/BgC;AACU;AACiB;AACd;AACoB;AACU;AAC3E;AACA,UAAU,aAAQ;AAClB,SAAS,GAAO;AAChB,YAAY,MAAU;AACtB,eAAe,mBAAa;AAC5B,YAAY,MAAS;AACrB,eAAe,SAAY;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,KAAK,mBAAK,qBAAQ,2BAAW,2BAAQ,2BAAW,qBAAE;AACkB;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,IAAI;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACO;AACP;AACO,MAAM,mBAAW;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,eAAe;AACtE,eAAe,4EAA4E;AAC3F;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,gCAAgC,YAAY;AAC5C;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA,2BAA2B,WAAW;AACtC;AACA;AACA,gBAAgB,OAAO;AACvB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,YAAY;AACpB;AACA,iBAAiB;AACjB;AACA,eAAe,YAAI;AACnB;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,cAAM;AAClB;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,YAAY,UAAU;AACtB,SAAS;AACT;AACA;AACA,kDAAkD;AAClD;AACA,mDAAmD;AACnD,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,YAAY,YAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,UAAU;AAC1B,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,mBAAW,6BAA6B;AACjC,yBAAyB,mBAAW;AAC3C;AACA;AACA;AACA;AACA,QAAQ,cAAM;AACd;AACA;AACA;AACA;AACA;AACO,8BAA8B,mBAAW;AAChD;AACA;AACA;AACA;AACA,gBAAgB,cAAM;AACtB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,cAAM;AAClB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mC;;ACzO4B;AACE;AACA;AACF;AAC5B,iC;;ACJ6D;AAC7D;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,SAAS;AACT,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACA;AACA,+CAA+C,MAAM;AACrD,SAAS;AACT;AACA;AACA;AACO;AACP;AACA,0BAA0B,OAAO;AACjC;AACO,MAAM,WAAK,SAAS,UAAU;AACrC;AACA;AACA,eAAe,cAAc,GAAG,eAAO;AACvC;AACA;AACA;AACA;AACA;AACA,YAAY,WAAK;AACjB,6BAA6B,WAAK,uBAAuB,eAAO;AAChE;AACA;AACA;AACA,eAAe,qBAAqB,GAAG,eAAO;AAC9C,YAAY,WAAK,iBAAiB,WAAK,uBAAuB,WAAK;AACnE,yDAAyD,uBAAuB,QAAQ,WAAK,qBAAqB;AAClH,YAAY,WAAW,CAAC,eAAO;AAC/B;AACA,aAAa;AACb;AACA;AACA;AACA,eAAe,cAAc,GAAG,eAAO;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,WAAK;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,UAAU;AAC7B;AACA;AACA;AACA,sCAAsC,eAAO;AAC7C,gBAAgB,WAAK;AACrB;AACA;AACA;AACA,aAAa,WAAK;AAClB,YAAY,WAAK;AACjB;AACA,aAAa,WAAK;AAClB;AACA,YAAY,WAAK;AACjB,YAAY,eAAO,UAAU,OAAO,WAAK,wBAAwB;AACjE;AACA;AACA,eAAe,YAAI;AACnB;AACA;AACA;AACA;AACA;AACA,QAAQ,WAAK;AACb;AACA;AACA;AACA,QAAQ,WAAK;AACb,eAAe,YAAI;AACnB;AACA;AACA,WAAK;AACL,WAAK,mBAAmB,eAAO;AAC/B,mCAAmC,WAAK;AACxC,iC;;ACnI+C;AAE/C,MAAM,iBAAO,SAAQ,UAAU;IAC7B,MAAM;QACJ,OAAO,YAAI;;;;;;;;;;;;;;;;;KAiBV,CAAC;IACJ,CAAC;CACF;AACD,cAAc,CAAC,MAAM,CAAC,YAAY,EAAE,iBAAM,CAAC,CAAC;;;ACxBgB;AACrD,MAAM,WAAK,SAAS,UAAU;AACrC;AACA;AACA,eAAe,QAAQ,GAAG,eAAO;AACjC;AACA;AACA;AACA;AACA,eAAe,qBAAqB,GAAG,eAAO;AAC9C,qDAAqD,uBAAuB,uBAAuB;AACnG,QAAQ,WAAW,CAAC,eAAO;AAC3B;AACA,SAAS;AACT;AACA;AACA,eAAe,QAAQ,GAAG,eAAO;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,qBAAqB,GAAG,eAAO;AAC9C,eAAe,QAAQ;AACvB;AACA;AACA,mBAAmB,YAAI;AACvB;AACA;AACA,mBAAmB,YAAI;AACvB;AACA;AACA;AACA,eAAe,YAAI;AACnB,QAAQ;AACR;AACA;AACA;AACA,WAAK,mBAAmB,eAAO;AAC/B,mCAAmC,WAAK;AACxC;AACA,6BAA6B,WAAK;AAClC;AACA,iC;;AC7C4C;AAGR;AAEpC,IAAI,IAAsC,EAAE;IAC1C,eAAO,CAAC,QAAQ,GAAG,wBAAwB,CAAC;CAC7C;AAED,SAAS,IAAI,CAAC,EAAY;IACxB,IAAI,CAAC,GAAG,KAAK,CAAC;IACd,OAAO,UAAS,GAAG,IAAW;QAC5B,IAAI,CAAC,CAAC,EAAE;YACN,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC;YACZ,CAAC,GAAG,IAAI,CAAC;SACV;IACH,CAAC,CAAC;AACJ,CAAC;AAED,MAAM,UAAU,GAAG,IAAI,CAAC;IACtB,MAAM,MAAM,GAAG,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;IAChD,MAAM,CAAC,GAAG,GAAG,gCAAgC,CAAC;IAC9C,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;IAC7B,MAAM,CAAC,MAAM,EAAE,CAAC;AAClB,CAAC,CAAC,CAAC;AAEY;IACb;QACE,OAAO,EAAE,GAAG;QACZ,QAAQ,EAAE,MAAM;KACjB;IACD;QACE,KAAK,EAAE,MAAM;QACb,OAAO,EAAE,MAAM;QACf,IAAI,EAAE,MAAM;QACZ,IAAI,OAAO;YACT,IAAI,KAAsC,EAAE,EAK3C;iBAAM;gBACL,UAAU,EAAE,CAAC;gBACb,OAAO,YAAI;;SAEV,CAAC;aACH;QACH,CAAC;KACF;IACD;QACE,KAAK,EAAE,MAAM;QACb,OAAO,EAAE,IAAI;QACb,OAAO,EAAE,YAAI;;KAEZ;KACF;IACD;QACE,KAAK,EAAE,MAAM;QACb,OAAO,EAAE,IAAI;QACb,OAAO,EAAE,YAAI;;KAEZ;KACF;IACD;QACE,KAAK,EAAE,MAAM;QACb,OAAO,EAAE,IAAI;QACb,OAAO,EAAE,YAAI;;KAEZ;KACF;CACkC,EAAC;;;ACtEU;AACc;AACvD,MAAM,SAAI,SAAS,UAAU;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,oBAAoB,GAAG,eAAO;AACjD;AACA;AACA;AACA;AACA;AACA,gBAAgB,eAAO,wBAAwB,cAAc;AAC7D;AACA;AACA,gBAAgB,eAAO,yBAAyB,sDAAsD;AACtG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,UAAU;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,oBAAoB,GAAG,eAAO;AAC7C,+CAA+C,OAAO;AACtD;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,YAAI;AACnB;AACA;AACA;AACA;AACA,SAAI;AACJ,SAAI,mBAAmB,eAAO;AAC9B,SAAI;AACJ,kCAAkC,SAAI;AACtC,gC;;ACrD0D;AAC5B;AAEK;AAEnC,MAAM,KAAK,GAAG,WAAM,CAAC;AAErB,MAAM,mBAAQ,SAAQ,UAAU;IAC9B,MAAM;QACJ,OAAO,YAAI;;;;;;;;;;;;;;;;;;;;;;;;;UAyBL,KAAK,CAAC,GAAG,CACT,KAAK,CAAC,EAAE,CACN,YAAI;;;yBAGS,KAAK,CAAC,IAAI,IAAI,KAAK,CAAC,OAAO;4BACxB,iBAAS,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS,CAAC;qBACxD,KAAK,CAAC,KAAK;;;aAGnB,CACJ;;KAEJ,CAAC;IACJ,CAAC;CACF;AACD,cAAc,CAAC,MAAM,CAAC,aAAa,EAAE,mBAAO,CAAC,CAAC;;;AClDS;AAEnB;AAEd;AACC;AAEO;AAE9B,MAAM,QAAI,SAAQ,UAAU;IAC1B,MAAM;QACJ,OAAO,YAAI;;;;;;;;;;;;2BAYY,WAAM;KAC5B,CAAC;IACJ,CAAC;CACF;AACD,cAAc,CAAC,MAAM,CAAC,UAAU,EAAE,QAAG,CAAC,CAAC;AAEvC,cAAM,CACJ,YAAI;;;;;;;GAOH,EACD,QAAQ,CAAC,IAAI,CACd,CAAC","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/gem-microfe/dist/host/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","const updaterSet = new Set();\nexport function addMicrotask(func) {\n    if (!updaterSet.size) {\n        // delayed execution callback after updating store\n        window.queueMicrotask(() => {\n            updaterSet.forEach(func => func());\n            updaterSet.clear();\n        });\n    }\n    updaterSet.delete(func);\n    updaterSet.add(func);\n}\nexport class Pool {\n    constructor() {\n        this.currentId = 0;\n        this.count = 0;\n        this.pool = new Map();\n    }\n    add(item) {\n        this.pool.set(this.count, item);\n        this.count += 1;\n    }\n    get() {\n        const item = this.pool.get(this.currentId);\n        if (item) {\n            this.pool.delete(this.currentId);\n            this.currentId += 1;\n        }\n        return item;\n    }\n}\nvar StorageType;\n(function (StorageType) {\n    StorageType[\"LOCALSTORAGE\"] = \"localStorage\";\n    StorageType[\"SESSIONSTORAGE\"] = \"sessionStorage\";\n})(StorageType || (StorageType = {}));\nexport class Storage {\n    constructor() {\n        this.cache = {};\n    }\n    get(key, type) {\n        if (!this.cache[type])\n            this.cache[type] = {};\n        if (key in this.cache[type])\n            return this.cache[type][key];\n        let value = window[type].getItem(key);\n        if (!value)\n            return undefined;\n        try {\n            const result = JSON.parse(value);\n            this.cache[type][key] = result;\n            return result;\n        }\n        catch (e) {\n            window[type].removeItem(key);\n        }\n    }\n    getLocal(key) {\n        return this.get(key, StorageType.LOCALSTORAGE);\n    }\n    getSession(key) {\n        return this.get(key, StorageType.SESSIONSTORAGE);\n    }\n    set(key, value, type) {\n        if (!this.cache[type])\n            this.cache[type] = {};\n        this.cache[type][key] = value;\n        return window[type].setItem(key, JSON.stringify(value));\n    }\n    setLocal(key, value) {\n        return this.set(key, value, StorageType.LOCALSTORAGE);\n    }\n    setSession(key, value) {\n        return this.set(key, value, StorageType.SESSIONSTORAGE);\n    }\n}\nexport class QueryString extends URLSearchParams {\n    constructor(param) {\n        if (param instanceof QueryString) {\n            return param;\n        }\n        else if (typeof param === 'string') {\n            super(param);\n        }\n        else if (param) {\n            super();\n            Object.keys(param).forEach(key => {\n                this.append(key, param[key]);\n            });\n        }\n        else {\n            super();\n        }\n    }\n    concat(param) {\n        let query;\n        if (typeof param === 'string') {\n            // @ts-ignore\n            query = Object.fromEntries(new URLSearchParams(param));\n        }\n        else {\n            query = param;\n        }\n        Object.keys(query).forEach(key => {\n            this.append(key, query[key]);\n        });\n    }\n    toString() {\n        const string = super.toString();\n        return string ? `?${string}` : '';\n    }\n    toJSON() {\n        return this.toString();\n    }\n}\n// 写 html 文本\nexport function raw(arr, ...args) {\n    return arr.reduce((prev, current, index) => prev + (args[index - 1] || '') + current);\n}\n// 写 css 文本，在 CSSStyleSheet 中使用\nexport function css(arr, ...args) {\n    return raw(arr, ...args);\n}\nconst rulesWeakMap = new WeakMap();\n// rules 引用的是字符串，所以不能动态更新\nexport function createCSSSheet(rules, mediaQuery = '') {\n    let cssSheet = rulesWeakMap.get(rules);\n    if (!cssSheet) {\n        const sheet = new CSSStyleSheet();\n        sheet.media.mediaText = mediaQuery;\n        let style = '';\n        if (typeof rules === 'string') {\n            style = rules;\n        }\n        else {\n            Object.keys(rules).forEach(key => {\n                sheet[key] = rules[key].type === 'tag' ? key : `${key}-${rules[key].key}`;\n                style += rules[key].str.replace(/&/g, sheet[key]);\n            });\n            rulesWeakMap.set(rules, sheet);\n        }\n        sheet.replaceSync(style);\n        cssSheet = sheet;\n    }\n    return cssSheet;\n}\nfunction randomStr(number = 5, origin = '0123456789abcdefghijklmnopqrstuvwxyz') {\n    const len = origin.length;\n    let str = '';\n    for (let i = 0; i < number; i++) {\n        str += origin[Math.floor(Math.random() * len)];\n    }\n    return str;\n}\n// 只支持一层嵌套\n// https://drafts.csswg.org/css-nesting-1/\nfunction flatStyled(style, type) {\n    const subStyle = [];\n    let str = `& {${style.replace(new RegExp('&.*{(.*)}', 'gs'), function (substr) {\n        subStyle.push(substr);\n        return '';\n    })}}` + subStyle.join('');\n    if (type !== 'tag')\n        str = str.replace(/&/g, type === 'class' ? '.&' : '#&');\n    return { str, key: randomStr(), type };\n}\n// 写 css 文本，在 CSSStyleSheet 中使用，使用 styed-components 高亮\n//\n// createCSSSheet({\n//   red: styled.class`\n//     background: red;\n//     &:hover {\n//       background: blue;\n//     }\n//   `,\n// });\nexport const styled = {\n    class: (arr, ...args) => {\n        const style = raw(arr, ...args);\n        return flatStyled(style, 'class');\n    },\n    id: (arr, ...args) => {\n        const style = raw(arr, ...args);\n        return flatStyled(style, 'id');\n    },\n    tag: (arr, ...args) => {\n        const style = raw(arr, ...args);\n        return flatStyled(style, 'tag');\n    },\n};\n//# sourceMappingURL=utils.js.map","import { addMicrotask } from './utils';\n// 不使用符号，方便跨 Realms\nexport const HANDLES_KEY = 'gem@storeHandlesKey';\nexport function createStore(originStore) {\n    const store = originStore;\n    // 序列化时忽略\n    Object.defineProperty(store, HANDLES_KEY, { enumerable: false, value: new Set(), writable: true });\n    return store;\n}\nexport function createStoreSet(originStoreSet) {\n    const keys = Object.keys(originStoreSet);\n    keys.forEach(key => {\n        createStore(originStoreSet[key]);\n    });\n    return originStoreSet;\n}\nexport function updateStore(store, value) {\n    Object.assign(store, value);\n    const listeners = store[HANDLES_KEY];\n    listeners.forEach(func => {\n        addMicrotask(func);\n    });\n}\nexport function connect(store, func) {\n    const listeners = store[HANDLES_KEY];\n    listeners.add(func);\n}\nexport function disconnect(store, func) {\n    const listeners = store[HANDLES_KEY];\n    listeners.delete(func);\n}\n//# sourceMappingURL=store.js.map","import { createStore, updateStore } from './store';\nimport { Storage, QueryString } from './utils';\nconst historyState = createStore({\n    list: [{}],\n    currentIndex: 0,\n});\nconst openHandleMap = new WeakMap();\nconst colseHandleMap = new WeakMap();\nconst shouldCloseHandleMap = new WeakMap();\nfunction generateState(data, open, close, shouldClose) {\n    if (data.$key)\n        throw new Error('`$key` is not allowed');\n    if (data.$open)\n        throw new Error('`$open` is not allowed');\n    if (data.$close)\n        throw new Error('`$close` is not allowed');\n    if (data.$shouldClose)\n        throw new Error('`$shouldClose` is not allowed');\n    const state = Object.assign({}, data, { $key: Date.now() + performance.now(), $open: !!open, $close: !!close, $shouldClose: !!shouldClose });\n    openHandleMap.set(state, open);\n    colseHandleMap.set(state, close);\n    shouldCloseHandleMap.set(state, shouldClose);\n    return state;\n}\nlet basePath = '';\nlet history = {\n    historyState,\n    get basePath() {\n        return basePath;\n    },\n    set basePath(v) {\n        const { list, currentIndex } = historyState;\n        // 应用初始化的时候设置\n        const location = list[currentIndex];\n        location.path = window.location.pathname.replace(new RegExp(`^${v}`), '');\n        updateStore(historyState, {});\n        basePath = v;\n    },\n    get location() {\n        const { list, currentIndex } = historyState;\n        const location = list[currentIndex];\n        return {\n            get query() {\n                return new QueryString(location.query);\n            },\n            hash: location.hash,\n            path: location.path,\n            state: location.state,\n            title: location.title,\n        };\n    },\n    forward() {\n        window.history.forward();\n    },\n    back() {\n        window.history.back();\n    },\n    push(options) {\n        const { path, open, close, shouldClose } = options;\n        const query = options.query || '';\n        const hash = options.hash || '';\n        const title = options.title || '';\n        const data = options.data || {};\n        const state = generateState(data, open, close, shouldClose);\n        window.history.pushState(state, title, history.basePath + path + new QueryString(query) + hash);\n        const { list, currentIndex } = historyState;\n        if (hash !== list[currentIndex].hash)\n            window.dispatchEvent(new CustomEvent('hashchange'));\n        const newList = list.slice(0, currentIndex + 1).concat({\n            state,\n            title,\n            path,\n            query,\n            hash,\n        });\n        updateStore(historyState, {\n            list: newList,\n            currentIndex: newList.length - 1,\n        });\n    },\n    // push 一条历史记录\n    // 有 close 处理函数时先执行 closeHandle 在 replace\n    // 比如在 modal 打开时跳转页面\n    // 不完美：只支持在 1 级 modal 中切换页面\n    pushWithoutCloseHandle(options) {\n        const { list, currentIndex } = historyState;\n        const { state } = list[currentIndex];\n        if (state.$close) {\n            const closeHandle = colseHandleMap.get(state);\n            closeHandle();\n            history.replace(options);\n        }\n        else {\n            history.push(options);\n        }\n    },\n    // 修改 url 意外的状态\n    pushState(options) {\n        const { list, currentIndex } = historyState;\n        const { path, query, hash } = list[currentIndex];\n        history.push(Object.assign({ path,\n            query,\n            hash }, options));\n    },\n    replace(options) {\n        const { path, open, close, shouldClose } = options;\n        const query = options.query || '';\n        const hash = options.hash || '';\n        const data = options.data || {};\n        const title = options.title || '';\n        const state = generateState(data, open, close, shouldClose);\n        window.history.replaceState(state, title, history.basePath + path + new QueryString(query) + hash);\n        const { list, currentIndex } = historyState;\n        if (hash !== list[currentIndex].hash)\n            window.dispatchEvent(new CustomEvent('hashchange'));\n        list.splice(currentIndex, 1, {\n            state,\n            title,\n            path,\n            query,\n            hash,\n        });\n        updateStore(historyState, {\n            list,\n        });\n    },\n    // 修改 url 意外的状态\n    replaceState(options) {\n        const { list, currentIndex } = historyState;\n        const { path, query, hash } = list[currentIndex];\n        history.replace(Object.assign({ path,\n            query,\n            hash }, options));\n    },\n};\nconst hasOtherHistory = !!window.__gemHistory;\nif (hasOtherHistory) {\n    history = window.__gemHistory;\n    const basePath = history.basePath;\n    Object.defineProperty(history, 'basePath', {\n        get() {\n            return basePath;\n        },\n        set() {\n            throw new Error('已经有其他环境使用 gem , 会共享 history 对象，禁止再修改 history 对象');\n        },\n    });\n}\nelse {\n    window.__gemHistory = history;\n    if (!window.history.state) {\n        // 初始化 historyItem[]\n        const { pathname, search, hash } = window.location;\n        history.replace({ path: pathname, query: search, hash });\n    }\n    else if (window.history.state.$close) {\n        // 有 handle 返回键的页面刷新\n        history.back();\n    }\n    const storage = new Storage();\n    const sessionStorageKey = 'gem@historyStateList';\n    updateStore(historyState, storage.getSession(sessionStorageKey));\n    window.addEventListener('unload', () => {\n        storage.setSession(sessionStorageKey, historyState);\n    });\n    /**\n     * 表示 popstate handler 中正在进行导航\n     */\n    let navigating = false;\n    window.addEventListener('popstate', event => {\n        if (!event.state || !event.state.$key) {\n            // 比如作为其他 app 的宿主 app\n            return;\n        }\n        if (navigating) {\n            navigating = false;\n            return;\n        }\n        // forward or back\n        // replace 不会触发\n        // url 变化前 historyItem\n        const { list, currentIndex } = historyState;\n        const { state: prevState } = list[currentIndex];\n        const newStateIndex = list.findIndex(({ state }) => state.$key === event.state.$key);\n        // gem app 嵌套 gem app，且不是同一个 history 对象时\n        if (newStateIndex === -1)\n            return;\n        const { state: newState } = list[newStateIndex];\n        if (newStateIndex > currentIndex && newState.$open) {\n            // 返回键关闭的 modal 能前进键重新打开\n            // 刷新后不能工作：刷新后 historyItem 中只有 url\n            const openHandle = openHandleMap.get(newState);\n            if (openHandle)\n                openHandle();\n        }\n        else if (prevState.$close) {\n            const closeHandle = colseHandleMap.get(prevState);\n            const shouldCloseHandle = shouldCloseHandleMap.get(prevState);\n            const notAllowClose = shouldCloseHandle && !shouldCloseHandle();\n            if (notAllowClose) {\n                navigating = true;\n                history.forward(); // 将重新触发 popstate\n                return; // 历史记录栈位置没有变化，不需要后面的 updateStore\n            }\n            else {\n                // handle 返回键\n                if (closeHandle) {\n                    closeHandle();\n                }\n                else {\n                    // 有 modal 的页面刷新会执行 back 触发 popstate\n                    // 如果是耳机 modal 页面刷新\n                    // 则还需要进行一次 back\n                    // 不完美：三级 modal 页面刷新不支持返回到初始页面\n                    navigating = true;\n                    history.back();\n                }\n            }\n        }\n        updateStore(historyState, {\n            currentIndex: newStateIndex,\n        });\n    });\n}\nexport { history };\n//# sourceMappingURL=history.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nconst directives = new WeakMap();\n/**\n * Brands a function as a directive factory function so that lit-html will call\n * the function during template rendering, rather than passing as a value.\n *\n * A _directive_ is a function that takes a Part as an argument. It has the\n * signature: `(part: Part) => void`.\n *\n * A directive _factory_ is a function that takes arguments for data and\n * configuration and returns a directive. Users of directive usually refer to\n * the directive factory as the directive. For example, \"The repeat directive\".\n *\n * Usually a template author will invoke a directive factory in their template\n * with relevant arguments, which will then return a directive function.\n *\n * Here's an example of using the `repeat()` directive factory that takes an\n * array and a function to render an item:\n *\n * ```js\n * html`<ul><${repeat(items, (item) => html`<li>${item}</li>`)}</ul>`\n * ```\n *\n * When `repeat` is invoked, it returns a directive function that closes over\n * `items` and the template function. When the outer template is rendered, the\n * return directive function is called with the Part for the expression.\n * `repeat` then performs it's custom logic to render multiple items.\n *\n * @param f The directive factory function. Must be a function that returns a\n * function of the signature `(part: Part) => void`. The returned function will\n * be called with the part object.\n *\n * @example\n *\n * import {directive, html} from 'lit-html';\n *\n * const immutable = directive((v) => (part) => {\n *   if (part.value !== v) {\n *     part.setValue(v)\n *   }\n * });\n */\nexport const directive = (f) => ((...args) => {\n    const d = f(...args);\n    directives.set(d, true);\n    return d;\n});\nexport const isDirective = (o) => {\n    return typeof o === 'function' && directives.has(o);\n};\n//# sourceMappingURL=directive.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * True if the custom elements polyfill is in use.\n */\nexport const isCEPolyfill = window.customElements !== undefined &&\n    window.customElements.polyfillWrapFlushCallback !==\n        undefined;\n/**\n * Reparents nodes, starting from `start` (inclusive) to `end` (exclusive),\n * into another container (could be the same container), before `before`. If\n * `before` is null, it appends the nodes to the container.\n */\nexport const reparentNodes = (container, start, end = null, before = null) => {\n    while (start !== end) {\n        const n = start.nextSibling;\n        container.insertBefore(start, before);\n        start = n;\n    }\n};\n/**\n * Removes nodes, starting from `start` (inclusive) to `end` (exclusive), from\n * `container`.\n */\nexport const removeNodes = (container, start, end = null) => {\n    while (start !== end) {\n        const n = start.nextSibling;\n        container.removeChild(start);\n        start = n;\n    }\n};\n//# sourceMappingURL=dom.js.map","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const noChange = {};\n/**\n * A sentinel value that signals a NodePart to fully clear its content.\n */\nexport const nothing = {};\n//# sourceMappingURL=part.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * An expression marker with embedded unique key to avoid collision with\n * possible text in templates.\n */\nexport const marker = `{{lit-${String(Math.random()).slice(2)}}}`;\n/**\n * An expression marker used text-positions, multi-binding attributes, and\n * attributes with markup-like text values.\n */\nexport const nodeMarker = `<!--${marker}-->`;\nexport const markerRegex = new RegExp(`${marker}|${nodeMarker}`);\n/**\n * Suffix appended to all bound attribute names.\n */\nexport const boundAttributeSuffix = '$lit$';\n/**\n * An updateable Template that tracks the location of dynamic parts.\n */\nexport class Template {\n    constructor(result, element) {\n        this.parts = [];\n        this.element = element;\n        const nodesToRemove = [];\n        const stack = [];\n        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n        const walker = document.createTreeWalker(element.content, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n        // Keeps track of the last index associated with a part. We try to delete\n        // unnecessary nodes, but we never want to associate two different parts\n        // to the same index. They must have a constant node between.\n        let lastPartIndex = 0;\n        let index = -1;\n        let partIndex = 0;\n        const { strings, values: { length } } = result;\n        while (partIndex < length) {\n            const node = walker.nextNode();\n            if (node === null) {\n                // We've exhausted the content inside a nested template element.\n                // Because we still have parts (the outer for-loop), we know:\n                // - There is a template in the stack\n                // - The walker will find a nextNode outside the template\n                walker.currentNode = stack.pop();\n                continue;\n            }\n            index++;\n            if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n                if (node.hasAttributes()) {\n                    const attributes = node.attributes;\n                    const { length } = attributes;\n                    // Per\n                    // https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,\n                    // attributes are not guaranteed to be returned in document order.\n                    // In particular, Edge/IE can return them out of order, so we cannot\n                    // assume a correspondence between part index and attribute index.\n                    let count = 0;\n                    for (let i = 0; i < length; i++) {\n                        if (endsWith(attributes[i].name, boundAttributeSuffix)) {\n                            count++;\n                        }\n                    }\n                    while (count-- > 0) {\n                        // Get the template literal section leading up to the first\n                        // expression in this attribute\n                        const stringForPart = strings[partIndex];\n                        // Find the attribute name\n                        const name = lastAttributeNameRegex.exec(stringForPart)[2];\n                        // Find the corresponding attribute\n                        // All bound attributes have had a suffix added in\n                        // TemplateResult#getHTML to opt out of special attribute\n                        // handling. To look up the attribute value we also need to add\n                        // the suffix.\n                        const attributeLookupName = name.toLowerCase() + boundAttributeSuffix;\n                        const attributeValue = node.getAttribute(attributeLookupName);\n                        node.removeAttribute(attributeLookupName);\n                        const statics = attributeValue.split(markerRegex);\n                        this.parts.push({ type: 'attribute', index, name, strings: statics });\n                        partIndex += statics.length - 1;\n                    }\n                }\n                if (node.tagName === 'TEMPLATE') {\n                    stack.push(node);\n                    walker.currentNode = node.content;\n                }\n            }\n            else if (node.nodeType === 3 /* Node.TEXT_NODE */) {\n                const data = node.data;\n                if (data.indexOf(marker) >= 0) {\n                    const parent = node.parentNode;\n                    const strings = data.split(markerRegex);\n                    const lastIndex = strings.length - 1;\n                    // Generate a new text node for each literal section\n                    // These nodes are also used as the markers for node parts\n                    for (let i = 0; i < lastIndex; i++) {\n                        let insert;\n                        let s = strings[i];\n                        if (s === '') {\n                            insert = createMarker();\n                        }\n                        else {\n                            const match = lastAttributeNameRegex.exec(s);\n                            if (match !== null && endsWith(match[2], boundAttributeSuffix)) {\n                                s = s.slice(0, match.index) + match[1] +\n                                    match[2].slice(0, -boundAttributeSuffix.length) + match[3];\n                            }\n                            insert = document.createTextNode(s);\n                        }\n                        parent.insertBefore(insert, node);\n                        this.parts.push({ type: 'node', index: ++index });\n                    }\n                    // If there's no text, we must insert a comment to mark our place.\n                    // Else, we can trust it will stick around after cloning.\n                    if (strings[lastIndex] === '') {\n                        parent.insertBefore(createMarker(), node);\n                        nodesToRemove.push(node);\n                    }\n                    else {\n                        node.data = strings[lastIndex];\n                    }\n                    // We have a part for each match found\n                    partIndex += lastIndex;\n                }\n            }\n            else if (node.nodeType === 8 /* Node.COMMENT_NODE */) {\n                if (node.data === marker) {\n                    const parent = node.parentNode;\n                    // Add a new marker node to be the startNode of the Part if any of\n                    // the following are true:\n                    //  * We don't have a previousSibling\n                    //  * The previousSibling is already the start of a previous part\n                    if (node.previousSibling === null || index === lastPartIndex) {\n                        index++;\n                        parent.insertBefore(createMarker(), node);\n                    }\n                    lastPartIndex = index;\n                    this.parts.push({ type: 'node', index });\n                    // If we don't have a nextSibling, keep this node so we have an end.\n                    // Else, we can remove it to save future costs.\n                    if (node.nextSibling === null) {\n                        node.data = '';\n                    }\n                    else {\n                        nodesToRemove.push(node);\n                        index--;\n                    }\n                    partIndex++;\n                }\n                else {\n                    let i = -1;\n                    while ((i = node.data.indexOf(marker, i + 1)) !== -1) {\n                        // Comment node has a binding marker inside, make an inactive part\n                        // The binding won't work, but subsequent bindings will\n                        // TODO (justinfagnani): consider whether it's even worth it to\n                        // make bindings in comments work\n                        this.parts.push({ type: 'node', index: -1 });\n                        partIndex++;\n                    }\n                }\n            }\n        }\n        // Remove text binding nodes after the walk to not disturb the TreeWalker\n        for (const n of nodesToRemove) {\n            n.parentNode.removeChild(n);\n        }\n    }\n}\nconst endsWith = (str, suffix) => {\n    const index = str.length - suffix.length;\n    return index >= 0 && str.slice(index) === suffix;\n};\nexport const isTemplatePartActive = (part) => part.index !== -1;\n// Allows `document.createComment('')` to be renamed for a\n// small manual size-savings.\nexport const createMarker = () => document.createComment('');\n/**\n * This regex extracts the attribute name preceding an attribute-position\n * expression. It does this by matching the syntax allowed for attributes\n * against the string literal directly preceding the expression, assuming that\n * the expression is in an attribute-value position.\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#elements-attributes\n *\n * \" \\x09\\x0a\\x0c\\x0d\" are HTML space characters:\n * https://www.w3.org/TR/html5/infrastructure.html#space-characters\n *\n * \"\\0-\\x1F\\x7F-\\x9F\" are Unicode control characters, which includes every\n * space character except \" \".\n *\n * So an attribute is:\n *  * The name: any character except a control character, space character, ('),\n *    (\"), \">\", \"=\", or \"/\"\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nexport const lastAttributeNameRegex = /([ \\x09\\x0a\\x0c\\x0d])([^\\0-\\x1F\\x7F-\\x9F \"'>=/]+)([ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*))$/;\n//# sourceMappingURL=template.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { isCEPolyfill } from './dom.js';\nimport { isTemplatePartActive } from './template.js';\n/**\n * An instance of a `Template` that can be attached to the DOM and updated\n * with new values.\n */\nexport class TemplateInstance {\n    constructor(template, processor, options) {\n        this.__parts = [];\n        this.template = template;\n        this.processor = processor;\n        this.options = options;\n    }\n    update(values) {\n        let i = 0;\n        for (const part of this.__parts) {\n            if (part !== undefined) {\n                part.setValue(values[i]);\n            }\n            i++;\n        }\n        for (const part of this.__parts) {\n            if (part !== undefined) {\n                part.commit();\n            }\n        }\n    }\n    _clone() {\n        // There are a number of steps in the lifecycle of a template instance's\n        // DOM fragment:\n        //  1. Clone - create the instance fragment\n        //  2. Adopt - adopt into the main document\n        //  3. Process - find part markers and create parts\n        //  4. Upgrade - upgrade custom elements\n        //  5. Update - set node, attribute, property, etc., values\n        //  6. Connect - connect to the document. Optional and outside of this\n        //     method.\n        //\n        // We have a few constraints on the ordering of these steps:\n        //  * We need to upgrade before updating, so that property values will pass\n        //    through any property setters.\n        //  * We would like to process before upgrading so that we're sure that the\n        //    cloned fragment is inert and not disturbed by self-modifying DOM.\n        //  * We want custom elements to upgrade even in disconnected fragments.\n        //\n        // Given these constraints, with full custom elements support we would\n        // prefer the order: Clone, Process, Adopt, Upgrade, Update, Connect\n        //\n        // But Safari dooes not implement CustomElementRegistry#upgrade, so we\n        // can not implement that order and still have upgrade-before-update and\n        // upgrade disconnected fragments. So we instead sacrifice the\n        // process-before-upgrade constraint, since in Custom Elements v1 elements\n        // must not modify their light DOM in the constructor. We still have issues\n        // when co-existing with CEv0 elements like Polymer 1, and with polyfills\n        // that don't strictly adhere to the no-modification rule because shadow\n        // DOM, which may be created in the constructor, is emulated by being placed\n        // in the light DOM.\n        //\n        // The resulting order is on native is: Clone, Adopt, Upgrade, Process,\n        // Update, Connect. document.importNode() performs Clone, Adopt, and Upgrade\n        // in one step.\n        //\n        // The Custom Elements v1 polyfill supports upgrade(), so the order when\n        // polyfilled is the more ideal: Clone, Process, Adopt, Upgrade, Update,\n        // Connect.\n        const fragment = isCEPolyfill ?\n            this.template.element.content.cloneNode(true) :\n            document.importNode(this.template.element.content, true);\n        const stack = [];\n        const parts = this.template.parts;\n        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n        const walker = document.createTreeWalker(fragment, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n        let partIndex = 0;\n        let nodeIndex = 0;\n        let part;\n        let node = walker.nextNode();\n        // Loop through all the nodes and parts of a template\n        while (partIndex < parts.length) {\n            part = parts[partIndex];\n            if (!isTemplatePartActive(part)) {\n                this.__parts.push(undefined);\n                partIndex++;\n                continue;\n            }\n            // Progress the tree walker until we find our next part's node.\n            // Note that multiple parts may share the same node (attribute parts\n            // on a single element), so this loop may not run at all.\n            while (nodeIndex < part.index) {\n                nodeIndex++;\n                if (node.nodeName === 'TEMPLATE') {\n                    stack.push(node);\n                    walker.currentNode = node.content;\n                }\n                if ((node = walker.nextNode()) === null) {\n                    // We've exhausted the content inside a nested template element.\n                    // Because we still have parts (the outer for-loop), we know:\n                    // - There is a template in the stack\n                    // - The walker will find a nextNode outside the template\n                    walker.currentNode = stack.pop();\n                    node = walker.nextNode();\n                }\n            }\n            // We've arrived at our part's node.\n            if (part.type === 'node') {\n                const part = this.processor.handleTextExpression(this.options);\n                part.insertAfterNode(node.previousSibling);\n                this.__parts.push(part);\n            }\n            else {\n                this.__parts.push(...this.processor.handleAttributeExpressions(node, part.name, part.strings, this.options));\n            }\n            partIndex++;\n        }\n        if (isCEPolyfill) {\n            document.adoptNode(fragment);\n            customElements.upgrade(fragment);\n        }\n        return fragment;\n    }\n}\n//# sourceMappingURL=template-instance.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { reparentNodes } from './dom.js';\nimport { boundAttributeSuffix, lastAttributeNameRegex, marker, nodeMarker } from './template.js';\nconst commentMarker = ` ${marker} `;\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\nexport class TemplateResult {\n    constructor(strings, values, type, processor) {\n        this.strings = strings;\n        this.values = values;\n        this.type = type;\n        this.processor = processor;\n    }\n    /**\n     * Returns a string of HTML used to create a `<template>` element.\n     */\n    getHTML() {\n        const l = this.strings.length - 1;\n        let html = '';\n        let isCommentBinding = false;\n        for (let i = 0; i < l; i++) {\n            const s = this.strings[i];\n            // For each binding we want to determine the kind of marker to insert\n            // into the template source before it's parsed by the browser's HTML\n            // parser. The marker type is based on whether the expression is in an\n            // attribute, text, or comment poisition.\n            //   * For node-position bindings we insert a comment with the marker\n            //     sentinel as its text content, like <!--{{lit-guid}}-->.\n            //   * For attribute bindings we insert just the marker sentinel for the\n            //     first binding, so that we support unquoted attribute bindings.\n            //     Subsequent bindings can use a comment marker because multi-binding\n            //     attributes must be quoted.\n            //   * For comment bindings we insert just the marker sentinel so we don't\n            //     close the comment.\n            //\n            // The following code scans the template source, but is *not* an HTML\n            // parser. We don't need to track the tree structure of the HTML, only\n            // whether a binding is inside a comment, and if not, if it appears to be\n            // the first binding in an attribute.\n            const commentOpen = s.lastIndexOf('<!--');\n            // We're in comment position if we have a comment open with no following\n            // comment close. Because <-- can appear in an attribute value there can\n            // be false positives.\n            isCommentBinding = (commentOpen > -1 || isCommentBinding) &&\n                s.indexOf('-->', commentOpen + 1) === -1;\n            // Check to see if we have an attribute-like sequence preceeding the\n            // expression. This can match \"name=value\" like structures in text,\n            // comments, and attribute values, so there can be false-positives.\n            const attributeMatch = lastAttributeNameRegex.exec(s);\n            if (attributeMatch === null) {\n                // We're only in this branch if we don't have a attribute-like\n                // preceeding sequence. For comments, this guards against unusual\n                // attribute values like <div foo=\"<!--${'bar'}\">. Cases like\n                // <!-- foo=${'bar'}--> are handled correctly in the attribute branch\n                // below.\n                html += s + (isCommentBinding ? commentMarker : nodeMarker);\n            }\n            else {\n                // For attributes we use just a marker sentinel, and also append a\n                // $lit$ suffix to the name to opt-out of attribute-specific parsing\n                // that IE and Edge do for style and certain SVG attributes.\n                html += s.substr(0, attributeMatch.index) + attributeMatch[1] +\n                    attributeMatch[2] + boundAttributeSuffix + attributeMatch[3] +\n                    marker;\n            }\n        }\n        html += this.strings[l];\n        return html;\n    }\n    getTemplateElement() {\n        const template = document.createElement('template');\n        template.innerHTML = this.getHTML();\n        return template;\n    }\n}\n/**\n * A TemplateResult for SVG fragments.\n *\n * This class wraps HTML in an `<svg>` tag in order to parse its contents in the\n * SVG namespace, then modifies the template to remove the `<svg>` tag so that\n * clones only container the original fragment.\n */\nexport class SVGTemplateResult extends TemplateResult {\n    getHTML() {\n        return `<svg>${super.getHTML()}</svg>`;\n    }\n    getTemplateElement() {\n        const template = super.getTemplateElement();\n        const content = template.content;\n        const svgElement = content.firstChild;\n        content.removeChild(svgElement);\n        reparentNodes(content, svgElement.firstChild);\n        return template;\n    }\n}\n//# sourceMappingURL=template-result.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { isDirective } from './directive.js';\nimport { removeNodes } from './dom.js';\nimport { noChange, nothing } from './part.js';\nimport { TemplateInstance } from './template-instance.js';\nimport { TemplateResult } from './template-result.js';\nimport { createMarker } from './template.js';\nexport const isPrimitive = (value) => {\n    return (value === null ||\n        !(typeof value === 'object' || typeof value === 'function'));\n};\nexport const isIterable = (value) => {\n    return Array.isArray(value) ||\n        // tslint:disable-next-line:no-any\n        !!(value && value[Symbol.iterator]);\n};\n/**\n * Writes attribute values to the DOM for a group of AttributeParts bound to a\n * single attibute. The value is only set once even if there are multiple parts\n * for an attribute.\n */\nexport class AttributeCommitter {\n    constructor(element, name, strings) {\n        this.dirty = true;\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n        this.parts = [];\n        for (let i = 0; i < strings.length - 1; i++) {\n            this.parts[i] = this._createPart();\n        }\n    }\n    /**\n     * Creates a single part. Override this to create a differnt type of part.\n     */\n    _createPart() {\n        return new AttributePart(this);\n    }\n    _getValue() {\n        const strings = this.strings;\n        const l = strings.length - 1;\n        let text = '';\n        for (let i = 0; i < l; i++) {\n            text += strings[i];\n            const part = this.parts[i];\n            if (part !== undefined) {\n                const v = part.value;\n                if (isPrimitive(v) || !isIterable(v)) {\n                    text += typeof v === 'string' ? v : String(v);\n                }\n                else {\n                    for (const t of v) {\n                        text += typeof t === 'string' ? t : String(t);\n                    }\n                }\n            }\n        }\n        text += strings[l];\n        return text;\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            this.element.setAttribute(this.name, this._getValue());\n        }\n    }\n}\n/**\n * A Part that controls all or part of an attribute value.\n */\nexport class AttributePart {\n    constructor(committer) {\n        this.value = undefined;\n        this.committer = committer;\n    }\n    setValue(value) {\n        if (value !== noChange && (!isPrimitive(value) || value !== this.value)) {\n            this.value = value;\n            // If the value is a not a directive, dirty the committer so that it'll\n            // call setAttribute. If the value is a directive, it'll dirty the\n            // committer if it calls setValue().\n            if (!isDirective(value)) {\n                this.committer.dirty = true;\n            }\n        }\n    }\n    commit() {\n        while (isDirective(this.value)) {\n            const directive = this.value;\n            this.value = noChange;\n            directive(this);\n        }\n        if (this.value === noChange) {\n            return;\n        }\n        this.committer.commit();\n    }\n}\n/**\n * A Part that controls a location within a Node tree. Like a Range, NodePart\n * has start and end locations and can set and update the Nodes between those\n * locations.\n *\n * NodeParts support several value types: primitives, Nodes, TemplateResults,\n * as well as arrays and iterables of those types.\n */\nexport class NodePart {\n    constructor(options) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        this.options = options;\n    }\n    /**\n     * Appends this part into a container.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendInto(container) {\n        this.startNode = container.appendChild(createMarker());\n        this.endNode = container.appendChild(createMarker());\n    }\n    /**\n     * Inserts this part after the `ref` node (between `ref` and `ref`'s next\n     * sibling). Both `ref` and its next sibling must be static, unchanging nodes\n     * such as those that appear in a literal section of a template.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterNode(ref) {\n        this.startNode = ref;\n        this.endNode = ref.nextSibling;\n    }\n    /**\n     * Appends this part into a parent part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendIntoPart(part) {\n        part.__insert(this.startNode = createMarker());\n        part.__insert(this.endNode = createMarker());\n    }\n    /**\n     * Inserts this part after the `ref` part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterPart(ref) {\n        ref.__insert(this.startNode = createMarker());\n        this.endNode = ref.endNode;\n        ref.endNode = this.startNode;\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        const value = this.__pendingValue;\n        if (value === noChange) {\n            return;\n        }\n        if (isPrimitive(value)) {\n            if (value !== this.value) {\n                this.__commitText(value);\n            }\n        }\n        else if (value instanceof TemplateResult) {\n            this.__commitTemplateResult(value);\n        }\n        else if (value instanceof Node) {\n            this.__commitNode(value);\n        }\n        else if (isIterable(value)) {\n            this.__commitIterable(value);\n        }\n        else if (value === nothing) {\n            this.value = nothing;\n            this.clear();\n        }\n        else {\n            // Fallback, will render the string representation\n            this.__commitText(value);\n        }\n    }\n    __insert(node) {\n        this.endNode.parentNode.insertBefore(node, this.endNode);\n    }\n    __commitNode(value) {\n        if (this.value === value) {\n            return;\n        }\n        this.clear();\n        this.__insert(value);\n        this.value = value;\n    }\n    __commitText(value) {\n        const node = this.startNode.nextSibling;\n        value = value == null ? '' : value;\n        // If `value` isn't already a string, we explicitly convert it here in case\n        // it can't be implicitly converted - i.e. it's a symbol.\n        const valueAsString = typeof value === 'string' ? value : String(value);\n        if (node === this.endNode.previousSibling &&\n            node.nodeType === 3 /* Node.TEXT_NODE */) {\n            // If we only have a single text node between the markers, we can just\n            // set its value, rather than replacing it.\n            // TODO(justinfagnani): Can we just check if this.value is primitive?\n            node.data = valueAsString;\n        }\n        else {\n            this.__commitNode(document.createTextNode(valueAsString));\n        }\n        this.value = value;\n    }\n    __commitTemplateResult(value) {\n        const template = this.options.templateFactory(value);\n        if (this.value instanceof TemplateInstance &&\n            this.value.template === template) {\n            this.value.update(value.values);\n        }\n        else {\n            // Make sure we propagate the template processor from the TemplateResult\n            // so that we use its syntax extension, etc. The template factory comes\n            // from the render function options so that it can control template\n            // caching and preprocessing.\n            const instance = new TemplateInstance(template, value.processor, this.options);\n            const fragment = instance._clone();\n            instance.update(value.values);\n            this.__commitNode(fragment);\n            this.value = instance;\n        }\n    }\n    __commitIterable(value) {\n        // For an Iterable, we create a new InstancePart per item, then set its\n        // value to the item. This is a little bit of overhead for every item in\n        // an Iterable, but it lets us recurse easily and efficiently update Arrays\n        // of TemplateResults that will be commonly returned from expressions like:\n        // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n        // If _value is an array, then the previous render was of an\n        // iterable and _value will contain the NodeParts from the previous\n        // render. If _value is not an array, clear this part and make a new\n        // array for NodeParts.\n        if (!Array.isArray(this.value)) {\n            this.value = [];\n            this.clear();\n        }\n        // Lets us keep track of how many items we stamped so we can clear leftover\n        // items from a previous render\n        const itemParts = this.value;\n        let partIndex = 0;\n        let itemPart;\n        for (const item of value) {\n            // Try to reuse an existing part\n            itemPart = itemParts[partIndex];\n            // If no existing part, create a new one\n            if (itemPart === undefined) {\n                itemPart = new NodePart(this.options);\n                itemParts.push(itemPart);\n                if (partIndex === 0) {\n                    itemPart.appendIntoPart(this);\n                }\n                else {\n                    itemPart.insertAfterPart(itemParts[partIndex - 1]);\n                }\n            }\n            itemPart.setValue(item);\n            itemPart.commit();\n            partIndex++;\n        }\n        if (partIndex < itemParts.length) {\n            // Truncate the parts array so _value reflects the current state\n            itemParts.length = partIndex;\n            this.clear(itemPart && itemPart.endNode);\n        }\n    }\n    clear(startNode = this.startNode) {\n        removeNodes(this.startNode.parentNode, startNode.nextSibling, this.endNode);\n    }\n}\n/**\n * Implements a boolean attribute, roughly as defined in the HTML\n * specification.\n *\n * If the value is truthy, then the attribute is present with a value of\n * ''. If the value is falsey, the attribute is removed.\n */\nexport class BooleanAttributePart {\n    constructor(element, name, strings) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        if (strings.length !== 2 || strings[0] !== '' || strings[1] !== '') {\n            throw new Error('Boolean attributes can only contain a single expression');\n        }\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        if (this.__pendingValue === noChange) {\n            return;\n        }\n        const value = !!this.__pendingValue;\n        if (this.value !== value) {\n            if (value) {\n                this.element.setAttribute(this.name, '');\n            }\n            else {\n                this.element.removeAttribute(this.name);\n            }\n            this.value = value;\n        }\n        this.__pendingValue = noChange;\n    }\n}\n/**\n * Sets attribute values for PropertyParts, so that the value is only set once\n * even if there are multiple parts for a property.\n *\n * If an expression controls the whole property value, then the value is simply\n * assigned to the property under control. If there are string literals or\n * multiple expressions, then the strings are expressions are interpolated into\n * a string first.\n */\nexport class PropertyCommitter extends AttributeCommitter {\n    constructor(element, name, strings) {\n        super(element, name, strings);\n        this.single =\n            (strings.length === 2 && strings[0] === '' && strings[1] === '');\n    }\n    _createPart() {\n        return new PropertyPart(this);\n    }\n    _getValue() {\n        if (this.single) {\n            return this.parts[0].value;\n        }\n        return super._getValue();\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            // tslint:disable-next-line:no-any\n            this.element[this.name] = this._getValue();\n        }\n    }\n}\nexport class PropertyPart extends AttributePart {\n}\n// Detect event listener options support. If the `capture` property is read\n// from the options object, then options are supported. If not, then the thrid\n// argument to add/removeEventListener is interpreted as the boolean capture\n// value so we should only pass the `capture` property.\nlet eventOptionsSupported = false;\ntry {\n    const options = {\n        get capture() {\n            eventOptionsSupported = true;\n            return false;\n        }\n    };\n    // tslint:disable-next-line:no-any\n    window.addEventListener('test', options, options);\n    // tslint:disable-next-line:no-any\n    window.removeEventListener('test', options, options);\n}\ncatch (_e) {\n}\nexport class EventPart {\n    constructor(element, eventName, eventContext) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        this.element = element;\n        this.eventName = eventName;\n        this.eventContext = eventContext;\n        this.__boundHandleEvent = (e) => this.handleEvent(e);\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        if (this.__pendingValue === noChange) {\n            return;\n        }\n        const newListener = this.__pendingValue;\n        const oldListener = this.value;\n        const shouldRemoveListener = newListener == null ||\n            oldListener != null &&\n                (newListener.capture !== oldListener.capture ||\n                    newListener.once !== oldListener.once ||\n                    newListener.passive !== oldListener.passive);\n        const shouldAddListener = newListener != null && (oldListener == null || shouldRemoveListener);\n        if (shouldRemoveListener) {\n            this.element.removeEventListener(this.eventName, this.__boundHandleEvent, this.__options);\n        }\n        if (shouldAddListener) {\n            this.__options = getOptions(newListener);\n            this.element.addEventListener(this.eventName, this.__boundHandleEvent, this.__options);\n        }\n        this.value = newListener;\n        this.__pendingValue = noChange;\n    }\n    handleEvent(event) {\n        if (typeof this.value === 'function') {\n            this.value.call(this.eventContext || this.element, event);\n        }\n        else {\n            this.value.handleEvent(event);\n        }\n    }\n}\n// We copy options because of the inconsistent behavior of browsers when reading\n// the third argument of add/removeEventListener. IE11 doesn't support options\n// at all. Chrome 41 only reads `capture` if the argument is an object.\nconst getOptions = (o) => o &&\n    (eventOptionsSupported ?\n        { capture: o.capture, passive: o.passive, once: o.once } :\n        o.capture);\n//# sourceMappingURL=parts.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { AttributeCommitter, BooleanAttributePart, EventPart, NodePart, PropertyCommitter } from './parts.js';\n/**\n * Creates Parts when a template is instantiated.\n */\nexport class DefaultTemplateProcessor {\n    /**\n     * Create parts for an attribute-position binding, given the event, attribute\n     * name, and string literals.\n     *\n     * @param element The element containing the binding\n     * @param name  The attribute name\n     * @param strings The string literals. There are always at least two strings,\n     *   event for fully-controlled bindings with a single expression.\n     */\n    handleAttributeExpressions(element, name, strings, options) {\n        const prefix = name[0];\n        if (prefix === '.') {\n            const committer = new PropertyCommitter(element, name.slice(1), strings);\n            return committer.parts;\n        }\n        if (prefix === '@') {\n            return [new EventPart(element, name.slice(1), options.eventContext)];\n        }\n        if (prefix === '?') {\n            return [new BooleanAttributePart(element, name.slice(1), strings)];\n        }\n        const committer = new AttributeCommitter(element, name, strings);\n        return committer.parts;\n    }\n    /**\n     * Create parts for a text-position binding.\n     * @param templateFactory\n     */\n    handleTextExpression(options) {\n        return new NodePart(options);\n    }\n}\nexport const defaultTemplateProcessor = new DefaultTemplateProcessor();\n//# sourceMappingURL=default-template-processor.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { marker, Template } from './template.js';\n/**\n * The default TemplateFactory which caches Templates keyed on\n * result.type and result.strings.\n */\nexport function templateFactory(result) {\n    let templateCache = templateCaches.get(result.type);\n    if (templateCache === undefined) {\n        templateCache = {\n            stringsArray: new WeakMap(),\n            keyString: new Map()\n        };\n        templateCaches.set(result.type, templateCache);\n    }\n    let template = templateCache.stringsArray.get(result.strings);\n    if (template !== undefined) {\n        return template;\n    }\n    // If the TemplateStringsArray is new, generate a key from the strings\n    // This key is shared between all templates with identical content\n    const key = result.strings.join(marker);\n    // Check if we already have a Template for this key\n    template = templateCache.keyString.get(key);\n    if (template === undefined) {\n        // If we have not seen this key before, create a new Template\n        template = new Template(result, result.getTemplateElement());\n        // Cache the Template for this key\n        templateCache.keyString.set(key, template);\n    }\n    // Cache all future queries for this TemplateStringsArray\n    templateCache.stringsArray.set(result.strings, template);\n    return template;\n}\nexport const templateCaches = new Map();\n//# sourceMappingURL=template-factory.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { removeNodes } from './dom.js';\nimport { NodePart } from './parts.js';\nimport { templateFactory } from './template-factory.js';\nexport const parts = new WeakMap();\n/**\n * Renders a template result or other value to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n *\n * @param result Any value renderable by NodePart - typically a TemplateResult\n *     created by evaluating a template tag like `html` or `svg`.\n * @param container A DOM parent to render to. The entire contents are either\n *     replaced, or efficiently updated if the same result type was previous\n *     rendered there.\n * @param options RenderOptions for the entire render tree rendered to this\n *     container. Render options must *not* change between renders to the same\n *     container, as those changes will not effect previously rendered DOM.\n */\nexport const render = (result, container, options) => {\n    let part = parts.get(container);\n    if (part === undefined) {\n        removeNodes(container, container.firstChild);\n        parts.set(container, part = new NodePart(Object.assign({ templateFactory }, options)));\n        part.appendInto(container);\n    }\n    part.setValue(result);\n    part.commit();\n};\n//# sourceMappingURL=render.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n *\n * Main lit-html module.\n *\n * Main exports:\n *\n * -  [[html]]\n * -  [[svg]]\n * -  [[render]]\n *\n * @module lit-html\n * @preferred\n */\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport { defaultTemplateProcessor } from './lib/default-template-processor.js';\nimport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { DefaultTemplateProcessor, defaultTemplateProcessor } from './lib/default-template-processor.js';\nexport { directive, isDirective } from './lib/directive.js';\n// TODO(justinfagnani): remove line when we get NodePart moving methods\nexport { removeNodes, reparentNodes } from './lib/dom.js';\nexport { noChange, nothing } from './lib/part.js';\nexport { AttributeCommitter, AttributePart, BooleanAttributePart, EventPart, isIterable, isPrimitive, NodePart, PropertyCommitter, PropertyPart } from './lib/parts.js';\nexport { parts, render } from './lib/render.js';\nexport { templateCaches, templateFactory } from './lib/template-factory.js';\nexport { TemplateInstance } from './lib/template-instance.js';\nexport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { createMarker, isTemplatePartActive, Template } from './lib/template.js';\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for lit-html usage.\n// TODO(justinfagnani): inject version number at build time\n(window['litHtmlVersions'] || (window['litHtmlVersions'] = [])).push('1.1.2');\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n */\nexport const html = (strings, ...values) => new TemplateResult(strings, values, 'html', defaultTemplateProcessor);\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n */\nexport const svg = (strings, ...values) => new SVGTemplateResult(strings, values, 'svg', defaultTemplateProcessor);\n//# sourceMappingURL=lit-html.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { createMarker, directive, NodePart, removeNodes, reparentNodes } from '../lit-html.js';\n// Helper functions for manipulating parts\n// TODO(kschaaf): Refactor into Part API?\nconst createAndInsertPart = (containerPart, beforePart) => {\n    const container = containerPart.startNode.parentNode;\n    const beforeNode = beforePart === undefined ? containerPart.endNode :\n        beforePart.startNode;\n    const startNode = container.insertBefore(createMarker(), beforeNode);\n    container.insertBefore(createMarker(), beforeNode);\n    const newPart = new NodePart(containerPart.options);\n    newPart.insertAfterNode(startNode);\n    return newPart;\n};\nconst updatePart = (part, value) => {\n    part.setValue(value);\n    part.commit();\n    return part;\n};\nconst insertPartBefore = (containerPart, part, ref) => {\n    const container = containerPart.startNode.parentNode;\n    const beforeNode = ref ? ref.startNode : containerPart.endNode;\n    const endNode = part.endNode.nextSibling;\n    if (endNode !== beforeNode) {\n        reparentNodes(container, part.startNode, endNode, beforeNode);\n    }\n};\nconst removePart = (part) => {\n    removeNodes(part.startNode.parentNode, part.startNode, part.endNode.nextSibling);\n};\n// Helper for generating a map of array item to its index over a subset\n// of an array (used to lazily generate `newKeyToIndexMap` and\n// `oldKeyToIndexMap`)\nconst generateMap = (list, start, end) => {\n    const map = new Map();\n    for (let i = start; i <= end; i++) {\n        map.set(list[i], i);\n    }\n    return map;\n};\n// Stores previous ordered list of parts and map of key to index\nconst partListCache = new WeakMap();\nconst keyListCache = new WeakMap();\n/**\n * A directive that repeats a series of values (usually `TemplateResults`)\n * generated from an iterable, and updates those items efficiently when the\n * iterable changes based on user-provided `keys` associated with each item.\n *\n * Note that if a `keyFn` is provided, strict key-to-DOM mapping is maintained,\n * meaning previous DOM for a given key is moved into the new position if\n * needed, and DOM will never be reused with values for different keys (new DOM\n * will always be created for new keys). This is generally the most efficient\n * way to use `repeat` since it performs minimum unnecessary work for insertions\n * amd removals.\n *\n * IMPORTANT: If providing a `keyFn`, keys *must* be unique for all items in a\n * given call to `repeat`. The behavior when two or more items have the same key\n * is undefined.\n *\n * If no `keyFn` is provided, this directive will perform similar to mapping\n * items to values, and DOM will be reused against potentially different items.\n */\nexport const repeat = directive((items, keyFnOrTemplate, template) => {\n    let keyFn;\n    if (template === undefined) {\n        template = keyFnOrTemplate;\n    }\n    else if (keyFnOrTemplate !== undefined) {\n        keyFn = keyFnOrTemplate;\n    }\n    return (containerPart) => {\n        if (!(containerPart instanceof NodePart)) {\n            throw new Error('repeat can only be used in text bindings');\n        }\n        // Old part & key lists are retrieved from the last update\n        // (associated with the part for this instance of the directive)\n        const oldParts = partListCache.get(containerPart) || [];\n        const oldKeys = keyListCache.get(containerPart) || [];\n        // New part list will be built up as we go (either reused from\n        // old parts or created for new keys in this update). This is\n        // saved in the above cache at the end of the update.\n        const newParts = [];\n        // New value list is eagerly generated from items along with a\n        // parallel array indicating its key.\n        const newValues = [];\n        const newKeys = [];\n        let index = 0;\n        for (const item of items) {\n            newKeys[index] = keyFn ? keyFn(item, index) : index;\n            newValues[index] = template(item, index);\n            index++;\n        }\n        // Maps from key to index for current and previous update; these\n        // are generated lazily only when needed as a performance\n        // optimization, since they are only required for multiple\n        // non-contiguous changes in the list, which are less common.\n        let newKeyToIndexMap;\n        let oldKeyToIndexMap;\n        // Head and tail pointers to old parts and new values\n        let oldHead = 0;\n        let oldTail = oldParts.length - 1;\n        let newHead = 0;\n        let newTail = newValues.length - 1;\n        // Overview of O(n) reconciliation algorithm (general approach\n        // based on ideas found in ivi, vue, snabbdom, etc.):\n        //\n        // * We start with the list of old parts and new values (and\n        //   arrays of their respective keys), head/tail pointers into\n        //   each, and we build up the new list of parts by updating\n        //   (and when needed, moving) old parts or creating new ones.\n        //   The initial scenario might look like this (for brevity of\n        //   the diagrams, the numbers in the array reflect keys\n        //   associated with the old parts or new values, although keys\n        //   and parts/values are actually stored in parallel arrays\n        //   indexed using the same head/tail pointers):\n        //\n        //      oldHead v                 v oldTail\n        //   oldKeys:  [0, 1, 2, 3, 4, 5, 6]\n        //   newParts: [ ,  ,  ,  ,  ,  ,  ]\n        //   newKeys:  [0, 2, 1, 4, 3, 7, 6] <- reflects the user's new\n        //                                      item order\n        //      newHead ^                 ^ newTail\n        //\n        // * Iterate old & new lists from both sides, updating,\n        //   swapping, or removing parts at the head/tail locations\n        //   until neither head nor tail can move.\n        //\n        // * Example below: keys at head pointers match, so update old\n        //   part 0 in-place (no need to move it) and record part 0 in\n        //   the `newParts` list. The last thing we do is advance the\n        //   `oldHead` and `newHead` pointers (will be reflected in the\n        //   next diagram).\n        //\n        //      oldHead v                 v oldTail\n        //   oldKeys:  [0, 1, 2, 3, 4, 5, 6]\n        //   newParts: [0,  ,  ,  ,  ,  ,  ] <- heads matched: update 0\n        //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    and advance both oldHead\n        //                                      & newHead\n        //      newHead ^                 ^ newTail\n        //\n        // * Example below: head pointers don't match, but tail\n        //   pointers do, so update part 6 in place (no need to move\n        //   it), and record part 6 in the `newParts` list. Last,\n        //   advance the `oldTail` and `oldHead` pointers.\n        //\n        //         oldHead v              v oldTail\n        //   oldKeys:  [0, 1, 2, 3, 4, 5, 6]\n        //   newParts: [0,  ,  ,  ,  ,  , 6] <- tails matched: update 6\n        //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    and advance both oldTail\n        //                                      & newTail\n        //         newHead ^              ^ newTail\n        //\n        // * If neither head nor tail match; next check if one of the\n        //   old head/tail items was removed. We first need to generate\n        //   the reverse map of new keys to index (`newKeyToIndexMap`),\n        //   which is done once lazily as a performance optimization,\n        //   since we only hit this case if multiple non-contiguous\n        //   changes were made. Note that for contiguous removal\n        //   anywhere in the list, the head and tails would advance\n        //   from either end and pass each other before we get to this\n        //   case and removals would be handled in the final while loop\n        //   without needing to generate the map.\n        //\n        // * Example below: The key at `oldTail` was removed (no longer\n        //   in the `newKeyToIndexMap`), so remove that part from the\n        //   DOM and advance just the `oldTail` pointer.\n        //\n        //         oldHead v           v oldTail\n        //   oldKeys:  [0, 1, 2, 3, 4, 5, 6]\n        //   newParts: [0,  ,  ,  ,  ,  , 6] <- 5 not in new map: remove\n        //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    5 and advance oldTail\n        //         newHead ^           ^ newTail\n        //\n        // * Once head and tail cannot move, any mismatches are due to\n        //   either new or moved items; if a new key is in the previous\n        //   \"old key to old index\" map, move the old part to the new\n        //   location, otherwise create and insert a new part. Note\n        //   that when moving an old part we null its position in the\n        //   oldParts array if it lies between the head and tail so we\n        //   know to skip it when the pointers get there.\n        //\n        // * Example below: neither head nor tail match, and neither\n        //   were removed; so find the `newHead` key in the\n        //   `oldKeyToIndexMap`, and move that old part's DOM into the\n        //   next head position (before `oldParts[oldHead]`). Last,\n        //   null the part in the `oldPart` array since it was\n        //   somewhere in the remaining oldParts still to be scanned\n        //   (between the head and tail pointers) so that we know to\n        //   skip that old part on future iterations.\n        //\n        //         oldHead v        v oldTail\n        //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n        //   newParts: [0, 2,  ,  ,  ,  , 6] <- stuck: update & move 2\n        //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    into place and advance\n        //                                      newHead\n        //         newHead ^           ^ newTail\n        //\n        // * Note that for moves/insertions like the one above, a part\n        //   inserted at the head pointer is inserted before the\n        //   current `oldParts[oldHead]`, and a part inserted at the\n        //   tail pointer is inserted before `newParts[newTail+1]`. The\n        //   seeming asymmetry lies in the fact that new parts are\n        //   moved into place outside in, so to the right of the head\n        //   pointer are old parts, and to the right of the tail\n        //   pointer are new parts.\n        //\n        // * We always restart back from the top of the algorithm,\n        //   allowing matching and simple updates in place to\n        //   continue...\n        //\n        // * Example below: the head pointers once again match, so\n        //   simply update part 1 and record it in the `newParts`\n        //   array.  Last, advance both head pointers.\n        //\n        //         oldHead v        v oldTail\n        //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n        //   newParts: [0, 2, 1,  ,  ,  , 6] <- heads matched: update 1\n        //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    and advance both oldHead\n        //                                      & newHead\n        //            newHead ^        ^ newTail\n        //\n        // * As mentioned above, items that were moved as a result of\n        //   being stuck (the final else clause in the code below) are\n        //   marked with null, so we always advance old pointers over\n        //   these so we're comparing the next actual old value on\n        //   either end.\n        //\n        // * Example below: `oldHead` is null (already placed in\n        //   newParts), so advance `oldHead`.\n        //\n        //            oldHead v     v oldTail\n        //   oldKeys:  [0, 1, -, 3, 4, 5, 6] <- old head already used:\n        //   newParts: [0, 2, 1,  ,  ,  , 6]    advance oldHead\n        //   newKeys:  [0, 2, 1, 4, 3, 7, 6]\n        //               newHead ^     ^ newTail\n        //\n        // * Note it's not critical to mark old parts as null when they\n        //   are moved from head to tail or tail to head, since they\n        //   will be outside the pointer range and never visited again.\n        //\n        // * Example below: Here the old tail key matches the new head\n        //   key, so the part at the `oldTail` position and move its\n        //   DOM to the new head position (before `oldParts[oldHead]`).\n        //   Last, advance `oldTail` and `newHead` pointers.\n        //\n        //               oldHead v  v oldTail\n        //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n        //   newParts: [0, 2, 1, 4,  ,  , 6] <- old tail matches new\n        //   newKeys:  [0, 2, 1, 4, 3, 7, 6]   head: update & move 4,\n        //                                     advance oldTail & newHead\n        //               newHead ^     ^ newTail\n        //\n        // * Example below: Old and new head keys match, so update the\n        //   old head part in place, and advance the `oldHead` and\n        //   `newHead` pointers.\n        //\n        //               oldHead v oldTail\n        //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n        //   newParts: [0, 2, 1, 4, 3,   ,6] <- heads match: update 3\n        //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    and advance oldHead &\n        //                                      newHead\n        //                  newHead ^  ^ newTail\n        //\n        // * Once the new or old pointers move past each other then all\n        //   we have left is additions (if old list exhausted) or\n        //   removals (if new list exhausted). Those are handled in the\n        //   final while loops at the end.\n        //\n        // * Example below: `oldHead` exceeded `oldTail`, so we're done\n        //   with the main loop.  Create the remaining part and insert\n        //   it at the new head position, and the update is complete.\n        //\n        //                   (oldHead > oldTail)\n        //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n        //   newParts: [0, 2, 1, 4, 3, 7 ,6] <- create and insert 7\n        //   newKeys:  [0, 2, 1, 4, 3, 7, 6]\n        //                     newHead ^ newTail\n        //\n        // * Note that the order of the if/else clauses is not\n        //   important to the algorithm, as long as the null checks\n        //   come first (to ensure we're always working on valid old\n        //   parts) and that the final else clause comes last (since\n        //   that's where the expensive moves occur). The order of\n        //   remaining clauses is is just a simple guess at which cases\n        //   will be most common.\n        //\n        // * TODO(kschaaf) Note, we could calculate the longest\n        //   increasing subsequence (LIS) of old items in new position,\n        //   and only move those not in the LIS set. However that costs\n        //   O(nlogn) time and adds a bit more code, and only helps\n        //   make rare types of mutations require fewer moves. The\n        //   above handles removes, adds, reversal, swaps, and single\n        //   moves of contiguous items in linear time, in the minimum\n        //   number of moves. As the number of multiple moves where LIS\n        //   might help approaches a random shuffle, the LIS\n        //   optimization becomes less helpful, so it seems not worth\n        //   the code at this point. Could reconsider if a compelling\n        //   case arises.\n        while (oldHead <= oldTail && newHead <= newTail) {\n            if (oldParts[oldHead] === null) {\n                // `null` means old part at head has already been used\n                // below; skip\n                oldHead++;\n            }\n            else if (oldParts[oldTail] === null) {\n                // `null` means old part at tail has already been used\n                // below; skip\n                oldTail--;\n            }\n            else if (oldKeys[oldHead] === newKeys[newHead]) {\n                // Old head matches new head; update in place\n                newParts[newHead] =\n                    updatePart(oldParts[oldHead], newValues[newHead]);\n                oldHead++;\n                newHead++;\n            }\n            else if (oldKeys[oldTail] === newKeys[newTail]) {\n                // Old tail matches new tail; update in place\n                newParts[newTail] =\n                    updatePart(oldParts[oldTail], newValues[newTail]);\n                oldTail--;\n                newTail--;\n            }\n            else if (oldKeys[oldHead] === newKeys[newTail]) {\n                // Old head matches new tail; update and move to new tail\n                newParts[newTail] =\n                    updatePart(oldParts[oldHead], newValues[newTail]);\n                insertPartBefore(containerPart, oldParts[oldHead], newParts[newTail + 1]);\n                oldHead++;\n                newTail--;\n            }\n            else if (oldKeys[oldTail] === newKeys[newHead]) {\n                // Old tail matches new head; update and move to new head\n                newParts[newHead] =\n                    updatePart(oldParts[oldTail], newValues[newHead]);\n                insertPartBefore(containerPart, oldParts[oldTail], oldParts[oldHead]);\n                oldTail--;\n                newHead++;\n            }\n            else {\n                if (newKeyToIndexMap === undefined) {\n                    // Lazily generate key-to-index maps, used for removals &\n                    // moves below\n                    newKeyToIndexMap = generateMap(newKeys, newHead, newTail);\n                    oldKeyToIndexMap = generateMap(oldKeys, oldHead, oldTail);\n                }\n                if (!newKeyToIndexMap.has(oldKeys[oldHead])) {\n                    // Old head is no longer in new list; remove\n                    removePart(oldParts[oldHead]);\n                    oldHead++;\n                }\n                else if (!newKeyToIndexMap.has(oldKeys[oldTail])) {\n                    // Old tail is no longer in new list; remove\n                    removePart(oldParts[oldTail]);\n                    oldTail--;\n                }\n                else {\n                    // Any mismatches at this point are due to additions or\n                    // moves; see if we have an old part we can reuse and move\n                    // into place\n                    const oldIndex = oldKeyToIndexMap.get(newKeys[newHead]);\n                    const oldPart = oldIndex !== undefined ? oldParts[oldIndex] : null;\n                    if (oldPart === null) {\n                        // No old part for this value; create a new one and\n                        // insert it\n                        const newPart = createAndInsertPart(containerPart, oldParts[oldHead]);\n                        updatePart(newPart, newValues[newHead]);\n                        newParts[newHead] = newPart;\n                    }\n                    else {\n                        // Reuse old part\n                        newParts[newHead] =\n                            updatePart(oldPart, newValues[newHead]);\n                        insertPartBefore(containerPart, oldPart, oldParts[oldHead]);\n                        // This marks the old part as having been used, so that\n                        // it will be skipped in the first two checks above\n                        oldParts[oldIndex] = null;\n                    }\n                    newHead++;\n                }\n            }\n        }\n        // Add parts for any remaining new values\n        while (newHead <= newTail) {\n            // For all remaining additions, we insert before last new\n            // tail, since old pointers are no longer valid\n            const newPart = createAndInsertPart(containerPart, newParts[newTail + 1]);\n            updatePart(newPart, newValues[newHead]);\n            newParts[newHead++] = newPart;\n        }\n        // Remove any remaining unused old parts\n        while (oldHead <= oldTail) {\n            const oldPart = oldParts[oldHead++];\n            if (oldPart !== null) {\n                removePart(oldPart);\n            }\n        }\n        // Save order of new parts for next round\n        partListCache.set(containerPart, newParts);\n        keyListCache.set(containerPart, newKeys);\n    };\n});\n//# sourceMappingURL=repeat.js.map","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { AttributePart, directive } from '../lit-html.js';\n/**\n * For AttributeParts, sets the attribute if the value is defined and removes\n * the attribute if the value is undefined.\n *\n * For other part types, this directive is a no-op.\n */\nexport const ifDefined = directive((value) => (part) => {\n    if (value === undefined && part instanceof AttributePart) {\n        if (value !== part.value) {\n            const name = part.committer.name;\n            part.committer.element.removeAttribute(name);\n        }\n    }\n    else {\n        part.setValue(value);\n    }\n});\n//# sourceMappingURL=if-defined.js.map","import * as lit from 'lit-html';\nimport { TemplateResult } from 'lit-html';\nimport { connect, disconnect, HANDLES_KEY } from './store';\nimport { Pool, addMicrotask } from './utils';\nimport { repeat as litRepeat } from 'lit-html/directives/repeat';\nimport { ifDefined as litIfDefined } from 'lit-html/directives/if-defined';\nlet litHtml = {\n    html: lit.html,\n    svg: lit.svg,\n    render: lit.render,\n    directive: lit.directive,\n    repeat: litRepeat,\n    ifDefined: litIfDefined,\n};\nif (window.__litHtml) {\n    // 自定义元素不能重复定义\n    // 所以嵌套 gem app 中导出的自定义元素类可能是之前定义的类\n    // 可能造成使用的 html 对象不是同一个\n    // map, 缓存之类的会变得不同\n    // 所以需要把他们放在全局对象中\n    litHtml = window.__litHtml;\n}\nelse {\n    window.__litHtml = litHtml;\n}\nconst { html, svg, render, directive, repeat, ifDefined } = litHtml;\nexport { html, svg, render, directive, repeat, ifDefined, TemplateResult };\nconst idElementMap = new Map();\n// id 必须全局唯一才能正确跳转\n// 只能检查自定义元素的 ID\nconst checkHash = () => {\n    const hash = window.location.hash.substr(1);\n    if (hash) {\n        const element = idElementMap.get(hash);\n        if (element) {\n            element.scrollIntoView();\n        }\n    }\n};\nwindow.addEventListener('hashchange', checkHash);\nif (document.readyState === 'complete') {\n    checkHash();\n}\nelse {\n    window.addEventListener('load', checkHash);\n}\n// global render task pool\nconst renderTaskPool = new Pool();\nconst exec = () => window.requestAnimationFrame(function callback(timestamp) {\n    const task = renderTaskPool.get();\n    if (task) {\n        task();\n        if (performance.now() - timestamp < 16) {\n            callback(timestamp);\n            return;\n        }\n    }\n    exec();\n});\nexec();\nexport const updaterWithSetStateSet = new Set();\n// final 字段如果使用 symbol 或者 private 将导致 modal-base 生成匿名子类 declaration 失败\nexport class BaseElement extends HTMLElement {\n    constructor(shadow = true) {\n        super();\n        this.setState = this.setState.bind(this);\n        this.willMount = this.willMount.bind(this);\n        this.render = this.render.bind(this);\n        this.mounted = this.mounted.bind(this);\n        this.shouldUpdate = this.shouldUpdate.bind(this);\n        this.update = this.update.bind(this);\n        this.updated = this.updated.bind(this);\n        this.disconnectStores = this.disconnectStores.bind(this);\n        this.attributeChanged = this.attributeChanged.bind(this);\n        this.propertyChanged = this.propertyChanged.bind(this);\n        this.unmounted = this.unmounted.bind(this);\n        this._renderRoot = shadow ? this.attachShadow({ mode: 'open' }) : this;\n        const { observedAttributes, observedPropertys, observedStores, adoptedStyleSheets } = new.target;\n        if (observedAttributes) {\n            observedAttributes.forEach(attr => {\n                Object.defineProperty(this, attr, {\n                    get: () => {\n                        return this.getAttribute(attr) || '';\n                    },\n                    set: (v) => {\n                        if (v === null) {\n                            this.removeAttribute(attr);\n                        }\n                        else {\n                            this.setAttribute(attr, v);\n                        }\n                    },\n                });\n            });\n        }\n        if (observedAttributes && !observedAttributes.includes('id')) {\n            // ID 更改是触发 update，更新 `idElementMap`\n            observedAttributes.push('id');\n        }\n        if (observedPropertys) {\n            observedPropertys.forEach(prop => {\n                let propValue = this[prop];\n                Object.defineProperty(this, prop, {\n                    get: () => {\n                        return propValue;\n                    },\n                    set: v => {\n                        if (v !== propValue) {\n                            propValue = v;\n                            if (this._isMounted) {\n                                this.propertyChanged(prop, propValue, v);\n                                addMicrotask(this.update);\n                            }\n                        }\n                    },\n                });\n            });\n        }\n        if (observedStores) {\n            observedStores.forEach(store => {\n                if (!store[HANDLES_KEY]) {\n                    throw new Error('`observedStores` only support store module');\n                }\n                connect(store, this.update);\n            });\n        }\n        if (adoptedStyleSheets) {\n            (this.shadowRoot || document).adoptedStyleSheets = adoptedStyleSheets;\n        }\n    }\n    /**@final */\n    setState(payload) {\n        Object.assign(this.state, payload);\n        addMicrotask(this.update);\n    }\n    willMount() { }\n    render() {\n        return html `\n      <slot></slot>\n    `;\n    }\n    mounted() { }\n    shouldUpdate() {\n        return true;\n    }\n    /**@final */\n    update() {\n        if (this._isMounted && this.shouldUpdate()) {\n            render(this.render(), this._renderRoot);\n            this.updated();\n            idElementMap.set(this.id, this);\n        }\n    }\n    updated() { }\n    /**@final */\n    disconnectStores(storeList) {\n        storeList.forEach(store => {\n            disconnect(store, this.update);\n        });\n    }\n    // 同步触发\n    propertyChanged(_name, _oldValue, _newValue) { }\n    // 异步触发\n    attributeChanged(_name, _oldValue, _newValue) { }\n    unmounted() { }\n    /**@private */\n    /**@final */\n    attributeChangedCallback(name, oldValue, newValue) {\n        if (this._isMounted) {\n            this.attributeChanged(name, oldValue, newValue);\n            addMicrotask(this.update);\n        }\n    }\n    /**@private */\n    /**@final */\n    // adoptedCallback() {}\n    /**@private */\n    /**@final */\n    disconnectedCallback() {\n        const constructor = this.constructor;\n        if (constructor.observedStores) {\n            constructor.observedStores.forEach(store => {\n                disconnect(store, this.update);\n            });\n        }\n        this.unmounted();\n        this._isMounted = false;\n    }\n}\nBaseElement.observedAttributes = ['id']; // WebAPI 中是实时检查这个列表\nexport class GemElement extends BaseElement {\n    /**@private */\n    /**@final */\n    connectedCallback() {\n        this.willMount();\n        render(this.render(), this._renderRoot);\n        this.mounted();\n        idElementMap.set(this.id, this);\n        this._isMounted = true;\n    }\n}\nexport class AsyncGemElement extends BaseElement {\n    /**@final */\n    update() {\n        renderTaskPool.add(() => {\n            if (this.shouldUpdate()) {\n                render(this.render(), this._renderRoot);\n                this.updated();\n                idElementMap.set(this.id, this);\n            }\n        });\n    }\n    /**@private */\n    /**@final */\n    connectedCallback() {\n        this.willMount();\n        renderTaskPool.add(() => {\n            render(this.render(), this._renderRoot);\n            this.mounted();\n            idElementMap.set(this.id, this);\n            this._isMounted = true;\n        });\n    }\n}\n// 重写了全局 customElements\n// 原因是方便多个独立 app 同时使用 gem\n// 用户使用和 gem 同名的元素不会生效也不会报错\nconst define = customElements.define.bind(customElements);\ncustomElements.define = function (tagName, Class, options) {\n    if (!customElements.get(tagName)) {\n        define(tagName, Class, options);\n    }\n};\n//# sourceMappingURL=element.js.map","export * from './lib/store';\nexport * from './lib/history';\nexport * from './lib/element';\nexport * from './lib/utils';\n//# sourceMappingURL=index.js.map","import { html, GemElement, history, updateStore } from '../';\nclass ParamsRegExp extends RegExp {\n    constructor(pattern) {\n        const namePosition = {};\n        let i = 0;\n        super(`^${pattern\n            .replace(/:([^/$]+)/g, (_m, name) => {\n            namePosition[name] = i++;\n            return `([^/]+)`;\n        })\n            .replace('*', '.*')}$`);\n        this.namePosition = namePosition;\n    }\n}\nfunction getReg(pattern) {\n    return new ParamsRegExp(pattern);\n}\n// `/a/b/:c/:d` `/a/b/1/2`\nfunction getParams(pattern, path) {\n    const reg = getReg(pattern);\n    const matchResult = path.match(reg);\n    if (matchResult) {\n        const params = {};\n        Object.keys(reg.namePosition).forEach(name => {\n            params[name] = matchResult[reg.namePosition[name] + 1];\n        });\n        return params;\n    }\n}\nexport function isMatch(pattern, path) {\n    return !!path.match(getReg(pattern));\n}\nexport function createPath(route, options) {\n    let path = route.pattern;\n    if (options && options.params) {\n        Object.keys(options.params).forEach(param => {\n            path = path.replace(new RegExp(`:${param}`, 'g'), options.params[param]);\n        });\n    }\n    return path;\n}\nexport function createLocation(route, options) {\n    const path = createPath(route, options);\n    return Object.assign({ path }, options);\n}\nexport class Route extends GemElement {\n    constructor() {\n        super();\n        const { path, query } = history.location;\n        const href = path + query;\n        this.href = href;\n    }\n    // 获取当前匹配的路由的 params\n    static getParams() {\n        if (Route.currentRoute) {\n            return getParams(Route.currentRoute.pattern, history.location.path);\n        }\n    }\n    initPage() {\n        const { list, currentIndex } = history.historyState;\n        if (Route.currentRoute && Route.currentRoute.title && Route.currentRoute.title !== list[currentIndex].title) {\n            list.splice(currentIndex, 1, Object.assign({}, list[currentIndex], { title: Route.currentRoute.title }));\n            updateStore(history.historyState, {\n                list,\n            });\n        }\n    }\n    shouldUpdate() {\n        const { path, query } = history.location;\n        const href = path + query;\n        if (path + query !== this.href) {\n            this.href = href;\n            return true;\n        }\n        return false;\n    }\n    mounted() {\n        this.initPage();\n    }\n    updated() {\n        this.initPage();\n        this.dispatchEvent(new CustomEvent('change'));\n    }\n    render() {\n        if (!this.routes)\n            return this.callback();\n        Route.currentRoute = null;\n        let defaultRoute;\n        let routes;\n        if (this.routes instanceof Array) {\n            routes = this.routes;\n        }\n        else {\n            routes = Object.values(this.routes);\n        }\n        for (let item of routes) {\n            const { pattern } = item;\n            if ('*' === pattern) {\n                defaultRoute = item;\n            }\n            else if (isMatch(pattern, history.location.path)) {\n                Route.currentRoute = item;\n                break;\n            }\n        }\n        if (!Route.currentRoute) {\n            Route.currentRoute = defaultRoute;\n        }\n        if (!Route.currentRoute)\n            return this.callback();\n        if (Route.currentRoute.redirect) {\n            history.replace({ path: Route.currentRoute.redirect });\n            return this.callback();\n        }\n        return html `\n      <style>\n        :host {\n          display: contents;\n        }\n      </style>\n      ${Route.currentRoute.content}\n    `;\n    }\n    callback() {\n        Route.currentRoute = null;\n        return html ``;\n    }\n}\nRoute.observedPropertys = ['routes'];\nRoute.observedStores = [history.historyState];\ncustomElements.define('gem-route', Route);\n//# sourceMappingURL=route.js.map","import { GemElement, html } from '@mantou/gem';\n\nclass Header extends GemElement {\n  render() {\n    return html`\n      <style>\n        :host {\n          background: black;\n          color: white;\n          grid-row: 1/2;\n          grid-column: 1/3;\n          display: flex;\n        }\n        .logo {\n          font-size: 48px;\n          font-weight: bold;\n          font-family: Arial, Helvetica, sans-serif;\n          padding: 0 24px;\n        }\n      </style>\n      <div class=\"logo\">LOGO</div>\n    `;\n  }\n}\ncustomElements.define('app-header', Header);\n","import { html, GemElement, history, updateStore } from '..';\nexport class Title extends GemElement {\n    constructor(isHidden) {\n        super();\n        const { title } = history.location;\n        this.documentTitle = title;\n        this.hidden = isHidden;\n    }\n    static setTitle(documentTitle) {\n        const { list, currentIndex } = history.historyState;\n        list.splice(currentIndex, 1, Object.assign({}, list[currentIndex], { title: documentTitle }));\n        updateStore(history.historyState, {\n            list,\n        });\n    }\n    shouldUpdate() {\n        const { title } = history.location;\n        if (title !== this.documentTitle) {\n            this.documentTitle = title;\n            return true;\n        }\n        return false;\n    }\n    render() {\n        const { list, currentIndex } = history.historyState;\n        const { title } = list[currentIndex];\n        document.title = title;\n        if (this.hidden) {\n            return html ``;\n        }\n        if (!title) {\n            return html `\n        <slot></slot>\n      `;\n        }\n        return html `\n      ${title}\n    `;\n    }\n}\nTitle.observedStores = [history.historyState];\ncustomElements.define('gem-title', Title);\nif (!document.head.querySelector('gem-title')) {\n    document.head.append(new Title(true));\n}\n//# sourceMappingURL=title.js.map","import { html, history } from '@mantou/gem';\n\nimport { RouteItem } from '@mantou/gem/elements/route';\nimport '@mantou/gem/elements/title';\n\nif (process.env.NODE_ENV !== 'development') {\n  history.basePath = '/gem-microfe/dist/host';\n}\n\nfunction once(fn: Function) {\n  let e = false;\n  return function(...rest: any[]) {\n    if (!e) {\n      fn(...rest);\n      e = true;\n    }\n  };\n}\n\nconst importAApp = once(function() {\n  const script = document.createElement('script');\n  script.src = '/gem-microfe/dist/app/index.js';\n  document.body.append(script);\n  script.remove();\n});\n\nexport default [\n  {\n    pattern: '/',\n    redirect: '/a/a',\n  },\n  {\n    title: '页面 A',\n    pattern: '/a/*',\n    path: '/a/a', // 给 <link> 用的\n    get content() {\n      if (process.env.NODE_ENV === 'development') {\n        import('../dist/app/');\n        return html`\n          <app-a-root></app-a-root>\n        `;\n      } else {\n        importAApp();\n        return html`\n          <app-a-root></app-a-root>\n        `;\n      }\n    },\n  },\n  {\n    title: '页面 B',\n    pattern: '/b',\n    content: html`\n      这是页面 B\n    `,\n  },\n  {\n    title: '页面 C',\n    pattern: '/c',\n    content: html`\n      这是页面 C\n    `,\n  },\n  {\n    title: '页面 D',\n    pattern: '/d',\n    content: html`\n      这是页面 D\n    `,\n  },\n] as (RouteItem & { path: string })[];\n","import { GemElement, html, history } from '../';\nimport { isMatch, createLocation, createPath } from './route';\nexport class Link extends GemElement {\n    constructor() {\n        super();\n        this.clickHandle = (e) => {\n            const href = this.getHref();\n            if (!href.startsWith('/')) {\n                window.open(href);\n                return;\n            }\n            const { path, query, hash } = history.location;\n            if (path + query + hash === href) {\n                return;\n            }\n            e.stopPropagation();\n            if (this.route) {\n                history.pushWithoutCloseHandle(createLocation(this.route, this.options));\n            }\n            else {\n                history.pushWithoutCloseHandle({ path: this.path, query: this.query, hash: this.hash });\n            }\n        };\n        this.onclick = this.clickHandle;\n    }\n    getHref() {\n        if (this.route) {\n            const queryProp = this.options ? this.options.query : '';\n            const hashProp = this.options ? this.options.hash : '';\n            return createPath(this.route, this.options) + queryProp + hashProp;\n        }\n        else {\n            return this.href || this.path + this.query + this.hash;\n        }\n    }\n    render() {\n        const { path, query, hash } = history.location;\n        const isMatchPattern = this.pattern && isMatch(this.pattern, path);\n        if (isMatchPattern || path + query + hash === this.getHref()) {\n            this.setAttribute('active', '');\n        }\n        else {\n            this.removeAttribute('active');\n        }\n        return html `\n      <slot></slot>\n    `;\n    }\n}\nLink.observedAttributes = ['href', 'path', 'query', 'hash', 'pattern'];\nLink.observedStores = [history.historyState];\nLink.observedPropertys = ['route', 'options'];\ncustomElements.define('gem-link', Link);\n//# sourceMappingURL=link.js.map","import { GemElement, html, ifDefined } from '@mantou/gem';\nimport routes from './routes';\n\nimport '@mantou/gem/elements/link';\n\nconst menus = routes;\n\nclass Sidebar extends GemElement {\n  render() {\n    return html`\n      <style>\n        :host {\n          background: rgba(0, 0, 0, 0.9);\n          color: white;\n        }\n        ol {\n          margin: 1em auto;\n          padding: 0;\n        }\n        li gem-link {\n          cursor: pointer;\n          display: block;\n          margin: 0;\n          padding: 0 1em;\n          line-height: 2;\n        }\n        li gem-link:hover {\n          background: rgba(255, 255, 255, 0.1);\n        }\n        li gem-link[active] {\n          background: rgba(255, 255, 255, 0.2);\n        }\n      </style>\n      <ol>\n        ${menus.map(\n          route =>\n            html`\n              <li>\n                <gem-link\n                  path=${route.path || route.pattern}\n                  pattern=${ifDefined(route.path ? route.pattern : undefined)}\n                  >${route.title}</gem-link\n                >\n              </li>\n            `,\n        )}\n      </ol>\n    `;\n  }\n}\ncustomElements.define('app-sidebar', Sidebar);\n","import { GemElement, html, render } from '@mantou/gem';\n\nimport '@mantou/gem/elements/route';\n\nimport './app-header';\nimport './app-sidebar';\n\nimport routes from './routes';\n\nclass App extends GemElement {\n  render() {\n    return html`\n      <style>\n        :host {\n          display: grid;\n          grid-template-columns: 220px auto;\n          grid-template-rows: 64px auto;\n          width: 100vw;\n          height: 100vh;\n        }\n      </style>\n      <app-header></app-header>\n      <app-sidebar></app-sidebar>\n      <gem-route .routes=${routes}></gem-route>\n    `;\n  }\n}\ncustomElements.define('app-root', App);\n\nrender(\n  html`\n    <style>\n      body {\n        margin: 0;\n      }\n    </style>\n    <app-root></app-root>\n  `,\n  document.body,\n);\n"],"sourceRoot":""}